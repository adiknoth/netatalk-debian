acl_ldap_freeconfig: void (void)
acl_ldap_readconfig: int (dictionary *)
ad_close: int (struct adouble *, int)
ad_convert: int (const char *, const struct stat *, const struct vol *, const char **)
ad_copy_header: int (struct adouble *, struct adouble *)
add_cachebyname: int (const char *, const uuidp_t, const uuidtype_t, const unsigned long)
add_cachebyuuid: int (uuidp_t, const char *, uuidtype_t, const unsigned long)
add_charset: charset_t (const char *)
ad_dir: char *(const char *)
ad_dtruncate: int (struct adouble *, const off_t)
adflags2logstr: const char *(int)
ad_flush: int (struct adouble *)
ad_forcegetid: uint32_t (struct adouble *)
adf_pread: ssize_t (struct ad_fd *, void *, size_t, off_t)
adf_pwrite: ssize_t (struct ad_fd *, const void *, size_t, off_t)
ad_getattr: int (const struct adouble *, uint16_t *)
ad_getdate: int (const struct adouble *, unsigned int, uint32_t *)
ad_getentryoff: off_t (const struct adouble *, int)
ad_getfuid: uid_t (void)
ad_getid: uint32_t (struct adouble *, const dev_t, const ino_t, const cnid_t, const void *)
ad_hf_mode: mode_t (mode_t)
ad_init: void (struct adouble *, const struct vol *)
ad_init_offsets: int (struct adouble *)
ad_init_old: void (struct adouble *, int, int)
ad_lock: int (struct adouble *, uint32_t, int, off_t, off_t, int)
ad_metadata: int (const char *, int, struct adouble *)
ad_metadataat: int (int, const char *, int, struct adouble *)
ad_mkdir: int (const char *, mode_t)
ad_mode: int (const char *, mode_t)
ad_open: int (struct adouble *, const char *, int, ...)
ad_openat: int (struct adouble *, int, const char *, int, ...)
ad_openforks: uint16_t (struct adouble *, uint16_t)
ad_path: const char *(const char *, int)
ad_path_ea: const char *(const char *, int)
ad_path_osx: const char *(const char *, int)
ad_read: ssize_t (struct adouble *, const uint32_t, off_t, char *, const size_t)
ad_readfile_init: int (const struct adouble *, const int, off_t *, const int)
ad_rebuild_adouble_header_ea: int (struct adouble *)
ad_rebuild_adouble_header_osx: int (struct adouble *, char *)
ad_rebuild_adouble_header_v2: int (struct adouble *)
ad_recvfile: ssize_t (struct adouble *, int, int, off_t, size_t, int)
ad_refresh: int (const char *, struct adouble *)
ad_reso_size: off_t (const char *, int, struct adouble *)
ad_rtruncate: int (struct adouble *, const char *, const off_t)
ad_setattr: int (const struct adouble *, const uint16_t)
ad_setdate: int (struct adouble *, unsigned int, uint32_t)
ad_setfuid: int (const uid_t)
ad_setid: int (struct adouble *, const dev_t, const ino_t, const uint32_t, const cnid_t, const void *)
ad_setname: int (struct adouble *, const char *)
ad_size: off_t (const struct adouble *, const uint32_t)
ad_stat: int (const char *, struct stat *)
ad_testlock: int (struct adouble *, int, const off_t)
ad_tmplock: int (struct adouble *, uint32_t, int, off_t, off_t, int)
ad_unlock: void (struct adouble *, const int, int)
ad_valid_header_osx: int (const char *)
ad_write: ssize_t (struct adouble *, uint32_t, off_t, int, const char *, size_t)
afp_config_free: void (AFPObj *)
afp_config_parse: int (AFPObj *, char *)
apply_ip_mask: void (struct sockaddr *, int)
asev_add_fd: _Bool (struct asev *, int, enum asev_fdtype, void *)
asev_del_fd: _Bool (struct asev *, int)
asev_init: struct asev *(int)
atalkdict_del: void (dictionary *)
atalkdict_dump: void (dictionary *, FILE *)
atalkdict_get: const char *(const dictionary *, const char *, const char *, const char *)
atalkdict_hash: unsigned int (char *)
atalkdict_new: dictionary *(int)
atalkdict_set: int (dictionary *, char *, char *, char *)
atalkdict_unset: void (dictionary *, char *, char *)
atalk_iconv: size_t (atalk_iconv_t, const char **, size_t *, char **, size_t *)
atalk_iconv_close: int (atalk_iconv_t)
atalk_iconv_open: atalk_iconv_t (const char *, const char *)
atalk_iniparser_dump: void (const dictionary *, FILE *)
atalk_iniparser_dump_ini: void (const dictionary *, FILE *)
atalk_iniparser_find_entry: int (const dictionary *, const char *)
atalk_iniparser_freedict: void (dictionary *)
atalk_iniparser_getboolean: int (const dictionary *, const char *, const char *, int)
atalk_iniparser_getdouble: double (const dictionary *, const char *, const char *, double)
atalk_iniparser_getint: int (const dictionary *, const char *, const char *, int)
atalk_iniparser_getnsec: int (const dictionary *)
atalk_iniparser_getsecname: const char *(const dictionary *, int)
atalk_iniparser_getstrdup: char *(const dictionary *, const char *, const char *, const char *)
atalk_iniparser_getstring: const char *(const dictionary *, const char *, const char *, const char *)
atalk_iniparser_load: dictionary *(const char *)
atalk_iniparser_set: int (dictionary *, char *, char *, char *)
atalk_iniparser_unset: void (dictionary *, char *, char *)
atalk_register_charset: int (struct charset_functions *)
balloc: int (bstring, int)
ballocmin: int (bstring, int)
basename_safe: const char *(const char *)
bassign: int (bstring, const_bstring)
bassignblk: int (bstring, const void *, int)
bassigncstr: int (bstring, const char *)
bassignformat: int (bstring, const char *, ...)
bassigngets: int (bstring, bNgetc, void *, char)
bassignmidstr: int (bstring, const_bstring, int, int)
bcatblk: int (bstring, const void *, int)
bcatcstr: int (bstring, const char *)
bconcat: int (bstring, const_bstring)
bconchar: int (bstring, char)
bcstrfree: int (char *)
bdelete: int (bstring, int, int)
bdestroy: int (bstring)
become_root: void (void)
bfindreplace: int (bstring, const_bstring, const_bstring, int)
bfindreplacecaseless: int (bstring, const_bstring, const_bstring, int)
bformat: bstring (const char *, ...)
bformata: int (bstring, const char *, ...)
bfromcstr: bstring (const char *)
bfromcstralloc: bstring (int, const char *)
bgetsa: int (bstring, bNgetc, void *, char)
bgetstream: bstring (bNgetc, void *, char)
binchr: int (const_bstring, int, const_bstring)
binchrr: int (const_bstring, int, const_bstring)
binsert: int (bstring, int, const_bstring, unsigned char)
binsertch: int (bstring, int, int, unsigned char)
binstr: int (const_bstring, int, const_bstring)
binstrcaseless: int (const_bstring, int, const_bstring)
binstrr: int (const_bstring, int, const_bstring)
binstrrcaseless: int (const_bstring, int, const_bstring)
biseq: int (const_bstring, const_bstring)
biseqcaseless: int (const_bstring, const_bstring)
biseqcstr: int (const_bstring, const char *)
biseqcstrcaseless: int (const_bstring, const char *)
bisstemeqblk: int (const_bstring, const void *, int)
bisstemeqcaselessblk: int (const_bstring, const void *, int)
bjoin: bstring (const struct bstrList *, const_bstring)
bjoinInv: bstring (const struct bstrList *, const_bstring)
blk2bstr: bstring (const void *, int)
bltrimws: int (bstring)
bmidstr: bstring (const_bstring, int, int)
bninchr: int (const_bstring, int, const_bstring)
bninchrr: int (const_bstring, int, const_bstring)
bpattern: int (bstring, int)
bread: bstring (bNread, void *)
breada: int (bstring, bNread, void *)
brefcstr: bstring (char *)
breplace: int (bstring, int, int, const_bstring, unsigned char)
brtrimws: int (bstring)
bsbufflength: int (struct bStream *, int)
bsclose: void *(struct bStream *)
bseof: int (const struct bStream *)
bsetstr: int (bstring, int, const_bstring, unsigned char)
bsopen: struct bStream *(bNread, void *)
bspeek: int (bstring, const struct bStream *)
bsplit: struct bstrList *(const_bstring, unsigned char)
bsplitcb: int (const_bstring, unsigned char, int, int (*)(void *, int, int), void *)
bsplits: struct bstrList *(const_bstring, const_bstring)
bsplitscb: int (const_bstring, const_bstring, int, int (*)(void *, int, int), void *)
bsplitstr: struct bstrList *(const_bstring, const_bstring)
bsplitstrcb: int (const_bstring, const_bstring, int, int (*)(void *, int, int), void *)
bsread: int (bstring, struct bStream *, int)
bsreada: int (bstring, struct bStream *, int)
bsreadln: int (bstring, struct bStream *, char)
bsreadlna: int (bstring, struct bStream *, char)
bsreadlns: int (bstring, struct bStream *, const_bstring)
bsreadlnsa: int (bstring, struct bStream *, const_bstring)
bssplitscb: int (struct bStream *, const_bstring, int (*)(void *, int, const_bstring), void *)
bssplitstrcb: int (struct bStream *, const_bstring, int (*)(void *, int, const_bstring), void *)
bstr2cstr: char *(const_bstring, char)
bstrchrp: int (const_bstring, int, int)
bstrcmp: int (const_bstring, const_bstring)
bstrcpy: bstring (const_bstring)
bstricmp: int (const_bstring, const_bstring)
bstrListAlloc: int (struct bstrList *, int)
bstrListAllocMin: int (struct bstrList *, int)
bstrListCreate: struct bstrList *(void)
bstrListCreateMin: struct bstrList *(int)
bstrListDestroy: int (struct bstrList *)
bstrListPop: bstring (struct bstrList *)
bstrListPush: int (struct bstrList *, bstring)
bstrncmp: int (const_bstring, const_bstring, int)
bstrnicmp: int (const_bstring, const_bstring, int)
bstrrchrp: int (const_bstring, int, int)
bsunread: int (struct bStream *, const_bstring)
btolower: int (bstring)
btoupper: int (bstring)
btrimws: int (bstring)
btrunc: int (bstring, int)
bunrefcstr: int (bstring)
bvcformata: int (bstring, int, const char *, struct __va_list_tag *)
charset_decompose: size_t (charset_t, char *, size_t, char *, size_t)
charset_mac_centraleurope: {name = "MAC_CENTRALEUROPE", kTextEncoding = 29, pull = <mac_centraleurope_pull>, push = <mac_centraleurope_push>, flags = 17, iname = 0x0, prev = 0x0, next = 0x0}
charset_mac_chinese_simp: {name = "MAC_CHINESE_SIMP", kTextEncoding = 25, pull = <mac_chinese_simp_pull>, push = <mac_chinese_simp_push>, flags = 85, iname = "EUC-CN", prev = 0x0, next = 0x0}
charset_mac_chinese_trad: {name = "MAC_CHINESE_TRAD", kTextEncoding = 2, pull = <mac_chinese_trad_pull>, push = <mac_chinese_trad_push>, flags = 85, iname = "BIG-5", prev = 0x0, next = 0x0}
charset_mac_cyrillic: {name = "MAC_CYRILLIC", kTextEncoding = 7, pull = <mac_cyrillic_pull>, push = <mac_cyrillic_push>, flags = 17, iname = 0x0, prev = 0x0, next = 0x0}
charset_mac_greek: {name = "MAC_GREEK", kTextEncoding = 6, pull = <mac_greek_pull>, push = <mac_greek_push>, flags = 17, iname = 0x0, prev = 0x0, next = 0x0}
charset_mac_hebrew: {name = "MAC_HEBREW", kTextEncoding = 5, pull = <mac_hebrew_pull>, push = <mac_hebrew_push>, flags = 17, iname = 0x0, prev = 0x0, next = 0x0}
charset_mac_japanese: {name = "MAC_JAPANESE", kTextEncoding = 1, pull = <mac_japanese_pull>, push = <mac_japanese_push>, flags = 85, iname = "SHIFT_JIS", prev = 0x0, next = 0x0}
charset_mac_korean: {name = "MAC_KOREAN", kTextEncoding = 3, pull = <mac_korean_pull>, push = <mac_korean_push>, flags = 85, iname = "EUC-KR", prev = 0x0, next = 0x0}
charset_mac_roman: {name = "MAC_ROMAN", kTextEncoding = 0, pull = <mac_roman_pull>, push = <mac_roman_push>, flags = 21, iname = 0x0, prev = 0x0, next = 0x0}
charset_mac_turkish: {name = "MAC_TURKISH", kTextEncoding = 35, pull = <mac_turkish_pull>, push = <mac_turkish_push>, flags = 17, iname = 0x0, prev = 0x0, next = 0x0}
charset_precompose: size_t (charset_t, char *, size_t, char *, size_t)
charset_strlower: size_t (charset_t, const char *, size_t, char *, size_t)
charset_strupper: size_t (charset_t, const char *, size_t, char *, size_t)
charset_to_ucs2_allocate: size_t (charset_t, uint16_t **, const char *)
charset_to_utf8_allocate: size_t (charset_t, char **, const char *)
charset_utf8: {name = "UTF8", kTextEncoding = 134217987, pull = <utf8_pull>, push = <utf8_push>, flags = 22, iname = 0x0, prev = 0x0, next = 0x0}
charset_utf8_mac: {name = "UTF8-MAC", kTextEncoding = 134217987, pull = <utf8_pull>, push = <utf8_push>, flags = 27, iname = 0x0, prev = 0x0, next = 0x0}
check_lockfile: int (const char *, const char *)
cjk_char_pull: size_t (uint16_t, uint16_t *, const uint32_t *)
cjk_char_push: size_t (uint16_t, uint8_t *)
cjk_compose: uint16_t (uint16_t, uint16_t, const uint32_t *, size_t)
cjk_compose_seq: uint16_t (const uint16_t *, size_t *, const uint32_t *, size_t)
cjk_generic_pull: size_t (size_t (*)(uint16_t *, const uint8_t *, size_t *), void *, char **, size_t *, char **, size_t *)
cjk_generic_push: size_t (size_t (*)(uint8_t *, const uint16_t *, size_t *), void *, char **, size_t *, char **, size_t *)
cjk_lookup: uint16_t (uint16_t, const cjk_index_t *, const uint16_t *)
cnid_add: cnid_t (struct _cnid_db *, const struct stat *, const cnid_t, const char *, const size_t, cnid_t)
cnid_close: void (struct _cnid_db *)
cnid_dbd_add: cnid_t (struct _cnid_db *, const struct stat *, cnid_t, const char *, size_t, cnid_t)
cnid_dbd_close: void (struct _cnid_db *)
cnid_dbd_delete: int (struct _cnid_db *, const cnid_t)
cnid_dbd_find: int (struct _cnid_db *, const char *, size_t, void *, size_t)
cnid_dbd_get: cnid_t (struct _cnid_db *, cnid_t, const char *, size_t)
cnid_dbd_getstamp: int (struct _cnid_db *, void *, const size_t)
cnid_dbd_lookup: cnid_t (struct _cnid_db *, const struct stat *, cnid_t, const char *, size_t)
cnid_dbd_module: {name = "dbd", db_list = {next = 0x0, prev = 0x0}, cnid_open = 0x0, flags = 0}
cnid_dbd_open: struct _cnid_db *(struct cnid_open_args *)
cnid_dbd_rebuild_add: cnid_t (struct _cnid_db *, const struct stat *, cnid_t, const char *, size_t, cnid_t)
cnid_dbd_resolve: char *(struct _cnid_db *, cnid_t *, void *, size_t)
cnid_dbd_update: int (struct _cnid_db *, cnid_t, const struct stat *, cnid_t, const char *, size_t)
cnid_dbd_wipe: int (struct _cnid_db *)
cnid_delete: int (struct _cnid_db *, cnid_t)
cnid_find: int (struct _cnid_db *, const char *, size_t, void *, size_t)
cnid_for_path: cnid_t (struct _cnid_db *, const char *, const char *, cnid_t *)
cnid_get: cnid_t (struct _cnid_db *, const cnid_t, char *, const size_t)
cnid_getstamp: int (struct _cnid_db *, void *, const size_t)
cnid_init: void (void)
cnid_last_add: cnid_t (struct _cnid_db *, const struct stat *, cnid_t, const char *, size_t, cnid_t)
cnid_last_close: void (struct _cnid_db *)
cnid_last_delete: int (struct _cnid_db *, const cnid_t)
cnid_last_get: cnid_t (struct _cnid_db *, cnid_t, const char *, size_t)
cnid_last_lookup: cnid_t (struct _cnid_db *, const struct stat *, cnid_t, const char *, size_t)
cnid_last_module: {name = "last", db_list = {next = 0x0, prev = 0x0}, cnid_open = 0x0, flags = 0}
cnid_last_open: struct _cnid_db *(struct cnid_open_args *)
cnid_last_resolve: char *(struct _cnid_db *, cnid_t *, void *, size_t)
cnid_last_update: int (struct _cnid_db *, cnid_t, const struct stat *, cnid_t, const char *, size_t)
cnid_lookup: cnid_t (struct _cnid_db *, const struct stat *, const cnid_t, char *, const size_t)
cnid_mysql_add: cnid_t (struct _cnid_db *, const struct stat *, cnid_t, const char *, size_t, cnid_t)
cnid_mysql_close: void (struct _cnid_db *)
cnid_mysql_delete: int (struct _cnid_db *, const cnid_t)
cnid_mysql_find: int (struct _cnid_db *, const char *, size_t, void *, size_t)
cnid_mysql_get: cnid_t (struct _cnid_db *, cnid_t, const char *, size_t)
cnid_mysql_getstamp: int (struct _cnid_db *, void *, const size_t)
cnid_mysql_lookup: cnid_t (struct _cnid_db *, const struct stat *, cnid_t, const char *, size_t)
cnid_mysql_module: {name = "mysql", db_list = {next = 0x0, prev = 0x0}, cnid_open = 0x0, flags = 0}
cnid_mysql_open: struct _cnid_db *(struct cnid_open_args *)
cnid_mysql_rebuild_add: cnid_t (struct _cnid_db *, const struct stat *, cnid_t, const char *, size_t, cnid_t)
cnid_mysql_resolve: char *(struct _cnid_db *, cnid_t *, void *, size_t)
cnid_mysql_update: int (struct _cnid_db *, cnid_t, const struct stat *, cnid_t, const char *, size_t)
cnid_mysql_wipe: int (struct _cnid_db *)
cnid_open: struct _cnid_db *(struct vol *, char *, int)
cnid_rebuild_add: cnid_t (struct _cnid_db *, const struct stat *, const cnid_t, char *, const size_t, cnid_t)
cnid_register: void (struct _cnid_module *)
cnid_resolve: char *(struct _cnid_db *, cnid_t *, void *, size_t)
cnid_tdb_add: cnid_t (struct _cnid_db *, const struct stat *, cnid_t, const char *, size_t, cnid_t)
cnid_tdb_close: void (struct _cnid_db *)
cnid_tdb_delete: int (struct _cnid_db *, const cnid_t)
cnid_tdb_get: cnid_t (struct _cnid_db *, cnid_t, const char *, size_t)
cnid_tdb_lookup: cnid_t (struct _cnid_db *, const struct stat *, cnid_t, const char *, size_t)
cnid_tdb_module: {name = "tdb", db_list = {next = 0x0, prev = 0x0}, cnid_open = 0x0, flags = 12}
cnid_tdb_open: struct _cnid_db *(struct cnid_open_args *)
cnid_tdb_resolve: char *(struct _cnid_db *, cnid_t *, void *, size_t)
cnid_tdb_update: int (struct _cnid_db *, cnid_t, const struct stat *, cnid_t, const char *, size_t)
cnid_update: int (struct _cnid_db *, const cnid_t, const struct stat *, const cnid_t, char *, const size_t)
cnid_wipe: int (struct _cnid_db *)
compare_ip: int (const struct sockaddr *, const struct sockaddr *)
convert_charset: size_t (charset_t, charset_t, charset_t, const char *, size_t, char *, size_t, uint16_t *)
convert_string: size_t (charset_t, charset_t, const void *, size_t, void *, size_t)
convert_string_allocate: size_t (charset_t, charset_t, const void *, size_t, char **)
copy_ea: int (const char *, int, const char *, const char *, mode_t)
copy_file: int (int, const char *, const char *, mode_t)
copy_file_fd: int (int, int)
copy_fork: int (int, struct adouble *, struct adouble *)
create_lockfile: int (const char *, const char *)
daemonize: int (int, int)
dalloc_add_talloc_chunk: int (DALLOC_CTX *, void *, void *, size_t)
dalloc_get: void *(const DALLOC_CTX *, ...)
dalloc_size: int (DALLOC_CTX *)
dalloc_strdup: char *(const void *, const char *)
dalloc_strndup: char *(const void *, const char *, size_t)
dalloc_value_for_key: void *(const DALLOC_CTX *, ...)
decompose_w: size_t (uint16_t *, size_t, uint16_t *, size_t *)
dequeue: void *(q_t *)
dir_rx_set: int (mode_t)
dsi_attention: int (DSI *, AFPUserBytes)
dsi_close: void (DSI *)
dsi_cmdreply: int (DSI *, const int)
dsi_disconnect: int (DSI *)
dsi_free: void (DSI *)
dsi_getsession: int (DSI *, server_child_t *, int, afp_child_t **)
dsi_getstatus: void (DSI *)
dsi_init: DSI *(AFPObj *, const char *, const char *, const char *)
dsi_opensession: void (DSI *)
dsi_read: ssize_t (DSI *, void *, const size_t)
dsi_readdone: void (DSI *)
dsi_readinit: ssize_t (DSI *, void *, const size_t, const size_t, const int)
dsi_stream_read: size_t (DSI *, void *, const size_t)
dsi_stream_read_file: ssize_t (DSI *, const int, off_t, const size_t, const int)
dsi_stream_receive: int (DSI *)
dsi_stream_send: int (DSI *, void *, size_t)
dsi_stream_write: ssize_t (DSI *, void *, const size_t, int)
dsi_tcp_init: int (DSI *, const char *, const char *, const char *)
dsi_tickle: int (DSI *)
dsi_write: size_t (DSI *, void *, const size_t)
dsi_writeflush: void (DSI *)
dsi_writeinit: size_t (DSI *, void *, const size_t)
ea_chmod_dir: int (const struct vol *, const char *, mode_t, struct stat *)
ea_chmod_file: int (const struct vol *, const char *, mode_t, struct stat *)
ea_chown: int (const struct vol *, const char *, uid_t, gid_t)
ea_close: int (struct ea *)
ea_copyfile: int (const struct vol *, int, const char *, const char *)
ea_deletefile: int (const struct vol *, int, const char *)
ea_open: int (const struct vol *, const char *, eaflags_t, struct ea *)
ea_openat: int (const struct vol *, int, const char *, eaflags_t, struct ea *)
ea_path: char *(const struct ea *, const char *, int)
ea_renamefile: int (const struct vol *, int, const char *, const char *)
enqueue: qnode_t *(q_t *, void *)
fault_setup: void (void (*)(void *))
find_charset_functions: struct charset_functions *(const char *)
free_charset_names: void (void)
freeifacelist: void (char **)
fullpathname: const char *(const char *)
getcwdpath: const char *(void)
getdefextmap: struct extmap *(void)
get_eacontent: int (const struct vol *, char *, size_t *, const char *, int, const char *, int)
get_easize: int (const struct vol *, char *, size_t *, const char *, int, const char *)
getextmap: struct extmap *(const char *)
getifacelist: char **(void)
getip_port: unsigned int (const struct sockaddr *)
getip_string: const char *(const struct sockaddr *)
getnamefromuuid: int (const uuidp_t, char **, uuidtype_t *)
getuuidfromname: int (const char *, uuidtype_t, unsigned char *)
getvolbyname: struct vol *(const char *)
getvolbypath: struct vol *(AFPObj *, const char *)
getvolbyvid: struct vol *(const uint16_t)
getvolumes: struct vol *(void)
gmem: int (gid_t, int, gid_t *)
init_iconv: void (void)
initline: void (int, char *)
initvol_vfs: void (struct vol *)
ipc_child_state: int (AFPObj *, uint16_t)
ipc_child_write: int (int, uint16_t, int, void *)
ipc_server_read: int (server_child_t *, int)
islower_sp: int (uint32_t)
islower_w: int (uint16_t)
isupper_sp: int (uint32_t)
isupper_w: int (uint16_t)
ldap_auth_dn: 0x0
ldap_auth_method: 0
ldap_auth_pw: 0x0
ldap_config_valid: 0
ldap_getnamefromuuid: int (const char *, char **, uuidtype_t *)
ldap_getuuidfromname: int (const char *, uuidtype_t, char **)
ldap_group_attr: 0x0
ldap_groupbase: 0x0
ldap_groupfilter: 0x0
ldap_groupscope: 0
ldap_name_attr: 0x0
ldap_prefs: {{pref = 0x0, name = "ldap server", strorint = 0, intfromarray = 0, valid = -1, valid_save = -1}, {pref = 0x0, name = "ldap auth method", strorint = 1, intfromarray = 1, valid = -1, valid_save = -1}, {pref = 0x0, name = "ldap auth dn", strorint = 0, intfromarray = 0, valid = 0, valid_save = 0}, {pref = 0x0, name = "ldap auth pw", strorint = 0, intfromarray = 0, valid = 0, valid_save = 0}, {pref = 0x0, name = "ldap userbase", strorint = 0, intfromarray = 0, valid = -1, valid_save = -1}, {pref = 0x0, name = "ldap userscope", strorint = 1, intfromarray = 1, valid = -1, valid_save = -1}, {pref = 0x0, name = "ldap groupbase", strorint = 0, intfromarray = 0, valid = -1, valid_save = -1}, {pref = 0x0, name = "ldap groupscope", strorint = 1, intfromarray = 1, valid = -1, valid_save = -1}, {pref = 0x0, name = "ldap uuid attr", strorint = 0, intfromarray = 0, valid = -1, valid_save = -1}, {pref = 0x0, name = "ldap uuid string", strorint = 0, intfromarray = 0, valid = 0, valid_save = 0}, {pref = 0x0, name = "ldap name attr", strorint = 0, intfromarray = 0, valid = -1, valid_save = -1}, {pref = 0x0, name = "ldap group attr", strorint = 0, intfromarray = 0, valid = -1, valid_save = -1}, {pref = 0x0, name = "ldap uid attr", strorint = 0, intfromarray = 0, valid = 0, valid_save = 0}, {pref = 0x0, name = "ldap uuid encoding", strorint = 1, intfromarray = 1, valid = 0, valid_save = 0}, {pref = 0x0, name = "ldap user filter", strorint = 0, intfromarray = 0, valid = 0, valid_save = 0}, {pref = 0x0, name = "ldap group filter", strorint = 0, intfromarray = 0, valid = 0, valid_save = 0}, {pref = 0x0, name = "ldap auth pw", strorint = 0, intfromarray = 0, valid = 0, valid_save = 0}, {pref = 0x0, name = 0x0, strorint = 0, intfromarray = 0, valid = 0, valid_save = 0}}
ldap_server: 0x0
ldap_uid_attr: 0x0
ldap_userbase: 0x0
ldap_userfilter: 0x0
ldap_userscope: 0
ldap_uuid_attr: 0x0
ldap_uuid_encoding: 0
ldap_uuid_string: 0x0
list_eas: int (const struct vol *, char *, size_t *, const char *, int)
load_charset: int (struct vol *)
load_volumes: int (AFPObj *, lv_flags_t)
localuuid_from_id: void (unsigned char *, uuidtype_t, unsigned int)
lock_reg: int (int, int, int, off_t, int, off_t)
log_config: {inited = false, syslog_opened = false, console = false, processname = '\000' <repeats 15 times>, syslog_facility = 0, syslog_display_options = 0}
make_log_entry: void (enum loglevels, enum logtypes, const char *, int, char *, ...)
make_tdb_data: unsigned char *(uint32_t, const struct stat *, const cnid_t, const char *, const size_t)
mb_generic_pull: size_t (int (*)(uint16_t *, const unsigned char *), void *, char **, size_t *, char **, size_t *)
mb_generic_push: size_t (int (*)(unsigned char *, uint16_t), void *, char **, size_t *, char **, size_t *)
netatalk_panic: void (const char *)
netatalk_rmdir: int (int, const char *)
netatalk_rmdir_all_errors: int (int, const char *)
netatalk_unlink: int (const char *)
netatalk_unlinkat: int (int, const char *)
nftw: int (const char *, nftw_func_t, dir_notification_func_t, int, int)
ochdir: int (const char *, int)
ochmod: int (char *, mode_t, const struct stat *, int)
ochown: int (const char *, uid_t, gid_t, int)
opendirat: DIR *(int, const char *)
openflags2logstr: const char *(int)
ostat: int (const char *, struct stat *, int)
ostatat: int (int, const char *, struct stat *, int)
parseline: int (int, char *)
posix_chmod: int (const char *, mode_t)
posix_fchmod: int (int, mode_t)
precompose_w: size_t (uint16_t *, size_t, uint16_t *, size_t *)
prefs_array: {{pref = "ldap auth method", valuestring = "none", value = 0}, {pref = "ldap auth method", valuestring = "simple", value = 128}, {pref = "ldap auth method", valuestring = "sasl", value = 163}, {pref = "ldap userscope", valuestring = "base", value = 0}, {pref = "ldap userscope", valuestring = "one", value = 1}, {pref = "ldap userscope", valuestring = "sub", value = 2}, {pref = "ldap groupscope", valuestring = "base", value = 0}, {pref = "ldap groupscope", valuestring = "one", value = 1}, {pref = "ldap groupscope", valuestring = "sub", value = 2}, {pref = "ldap uuid encoding", valuestring = "ms-guid", value = 1}, {pref = "ldap uuid encoding", valuestring = "string", value = 0}, {pref = 0x0, valuestring = 0x0, value = 0}}
prequeue: qnode_t *(q_t *, void *)
print_groups: const char *(int, gid_t *)
queue_destroy: void (q_t *, void (*)(void *))
queue_init: q_t *(void)
randombytes: void (void *, int)
readt: ssize_t (int, void *, const size_t, int, int)
realpath_safe: char *(const char *)
recv_fd: int (int, int)
rel_path_in_vol: bstring (const char *, const char *)
remove_acl_vfs: int (const char *)
remove_ea: int (const struct vol *, const char *, const char *, int)
run_cmd: int (const char *, char **)
search_cachebyname: int (const char *, uuidtype_t *, unsigned char *)
search_cachebyuuid: int (uuidp_t, char **, uuidtype_t *)
send_fd: int (int, int)
server_child_add: afp_child_t *(server_child_t *, pid_t, int)
server_child_alloc: server_child_t *(int)
server_child_free: void (server_child_t *)
server_child_kill: void (server_child_t *, int)
server_child_kill_one_by_id: void (server_child_t *, pid_t, uid_t, uint32_t, char *, uint32_t)
server_child_remove: int (server_child_t *, pid_t)
server_child_resolve: afp_child_t *(server_child_t *, id_t)
server_child_transfer_session: int (server_child_t *, pid_t, uid_t, int, uint16_t)
server_lock: pid_t (char *, char *, int)
server_reset_signal: void (void)
set_charset_name: int (charset_t, const char *)
set_ea: int (const struct vol *, const char *, const char *, const char *, size_t, int)
setfilmode: int (const struct vol *, const char *, mode_t, struct stat *)
set_groups: int (AFPObj *, struct passwd *)
setnonblock: int (int, int)
set_processname: void (const char *)
setuplog: void (const char *, const char *)
statat: int (int, const char *, struct stat *)
strcasechr_sp: uint16_t *(const uint16_t *, uint32_t)
strcasechr_w: uint16_t *(const uint16_t *, uint16_t)
strcasecmp_w: int (const uint16_t *, const uint16_t *)
strcasestr_w: uint16_t *(const uint16_t *, const uint16_t *)
strcat_w: uint16_t *(uint16_t *, const uint16_t *)
strchr_w: uint16_t *(const uint16_t *, uint16_t)
strcmp_w: int (const uint16_t *, const uint16_t *)
strdiacasecmp: int (const char *, const char *)
strdup_w: uint16_t *(const uint16_t *)
stripped_slashes_basename: char *(char *)
strlcat: size_t (char *, const char *, size_t)
strlcpy: size_t (char *, const char *, size_t)
strlen_w: size_t (const uint16_t *)
strlower_w: int (uint16_t *)
strncasecmp_w: int (const uint16_t *, const uint16_t *, size_t)
strncat_w: uint16_t *(uint16_t *, const uint16_t *, const size_t)
strncmp_w: int (const uint16_t *, const uint16_t *, size_t)
strncpy_w: uint16_t *(uint16_t *, const uint16_t *, const size_t)
strndiacasecmp: int (const char *, const char *, size_t)
strndup_w: uint16_t *(const uint16_t *, size_t)
strnlen_w: size_t (const uint16_t *, size_t)
strstr_w: uint16_t *(const uint16_t *, const uint16_t *)
strtok_quote: char *(char *, const char *)
strupper_w: int (uint16_t *)
sys_ea_copyfile: int (const struct vol *, int, const char *, const char *)
sys_fgetxattr: ssize_t (int, const char *, void *, size_t)
sys_fsetxattr: int (int, const char *, const void *, size_t, int)
sys_ftruncate: int (int, off_t)
sys_get_eacontent: int (const struct vol *, char *, size_t *, const char *, int, const char *, int)
sys_get_easize: int (const struct vol *, char *, size_t *, const char *, int, const char *)
sys_getxattr: ssize_t (const char *, const char *, void *, size_t)
sys_getxattrfd: int (int, const char *, int, ...)
sys_lgetxattr: ssize_t (const char *, const char *, void *, size_t)
sys_list_eas: int (const struct vol *, char *, size_t *, const char *, int)
sys_listxattr: ssize_t (const char *, char *, size_t)
sys_llistxattr: ssize_t (const char *, char *, size_t)
sys_lremovexattr: int (const char *, const char *)
sys_lsetxattr: int (const char *, const char *, const void *, size_t, int)
sys_remove_ea: int (const struct vol *, const char *, const char *, int)
sys_removexattr: int (const char *, const char *)
sys_sendfile: ssize_t (int, int, off_t *, size_t)
sys_set_ea: int (const struct vol *, const char *, const char *, const char *, size_t, int)
sys_setxattr: int (const char *, const char *, const void *, size_t, int)
talloc_asprintf: char *(const void *, const char *, ...)
talloc_asprintf_append: char *(char *, const char *, ...)
talloc_asprintf_append_buffer: char *(char *, const char *, ...)
talloc_autofree_context: void *(void)
talloc_check_name: void *(const void *, const char *)
talloc_disable_null_tracking: void (void)
talloc_enable_leak_report: void (void)
talloc_enable_leak_report_full: void (void)
talloc_enable_null_tracking: void (void)
talloc_enable_null_tracking_no_autofree: void (void)
talloc_find_parent_byname: void *(const void *, const char *)
talloc_free_children: void (void *)
talloc_get_name: const char *(const void *)
talloc_get_size: size_t (const void *)
talloc_increase_ref_count: int (const void *)
talloc_init: void *(const char *, ...)
talloc_is_parent: int (const void *, const void *)
talloc_named: void *(const void *, size_t, const char *, ...)
talloc_named_const: void *(const void *, size_t, const char *)
talloc_parent: void *(const void *)
talloc_parent_name: const char *(const void *)
talloc_pool: void *(const void *, size_t)
talloc_realloc_fn: void *(const void *, void *, size_t)
talloc_reference_count: size_t (const void *)
talloc_reparent: void *(const void *, const void *, const void *)
talloc_report: void (const void *, FILE *)
talloc_report_depth_cb: void (const void *, int, int, void (*)(const void *, int, int, int, void *), void *)
talloc_report_depth_file: void (const void *, int, int, FILE *)
talloc_report_full: void (const void *, FILE *)
talloc_set_abort_fn: void (void (*)(const char *))
talloc_set_log_fn: void (void (*)(const char *))
talloc_set_log_stderr: void (void)
talloc_set_name: const char *(const void *, const char *, ...)
talloc_set_name_const: void (const void *, const char *)
talloc_show_parents: void (const void *, FILE *)
talloc_strdup: char *(const void *, const char *)
talloc_strdup_append: char *(char *, const char *)
talloc_strdup_append_buffer: char *(char *, const char *)
talloc_strndup: char *(const void *, const char *, size_t)
talloc_strndup_append: char *(char *, const char *, size_t)
talloc_strndup_append_buffer: char *(char *, const char *, size_t)
talloc_total_blocks: size_t (const void *)
talloc_total_size: size_t (const void *)
talloc_unlink: int (const void *, void *)
talloc_vasprintf: char *(const void *, const char *, struct __va_list_tag *)
talloc_vasprintf_append: char *(char *, const char *, struct __va_list_tag *)
talloc_vasprintf_append_buffer: char *(char *, const char *, struct __va_list_tag *)
talloc_version_major: int (void)
talloc_version_minor: int (void)
tdb_add_flags: void (struct tdb_context *, unsigned int)
tdb_allocate: tdb_off_t (struct tdb_context *, tdb_len_t, struct tdb_record *)
tdb_alloc_read: unsigned char *(struct tdb_context *, tdb_off_t, tdb_len_t)
tdb_append: int (struct tdb_context *, TDB_DATA, TDB_DATA)
tdb_brlock: int (struct tdb_context *, tdb_off_t, int, int, int, size_t)
tdb_brlock_upgrade: int (struct tdb_context *, tdb_off_t, size_t)
tdb_chainlock: int (struct tdb_context *, TDB_DATA)
tdb_chainlock_mark: int (struct tdb_context *, TDB_DATA)
tdb_chainlock_nonblock: int (struct tdb_context *, TDB_DATA)
tdb_chainlock_read: int (struct tdb_context *, TDB_DATA)
tdb_chainlock_unmark: int (struct tdb_context *, TDB_DATA)
tdb_chainunlock: int (struct tdb_context *, TDB_DATA)
tdb_chainunlock_read: int (struct tdb_context *, TDB_DATA)
tdb_check: int (struct tdb_context *, int (*)(TDB_DATA, TDB_DATA, void *), void *)
tdb_close: int (struct tdb_context *)
tdb_convert: void *(void *, uint32_t)
tdb_delete: int (struct tdb_context *, TDB_DATA)
tdb_do_delete: int (struct tdb_context *, tdb_off_t, struct tdb_record *)
tdb_dump_all: void (struct tdb_context *)
tdb_enable_seqnum: void (struct tdb_context *)
tdb_error: enum TDB_ERROR (struct tdb_context *)
tdb_errorstr: const char *(struct tdb_context *)
tdb_exists: int (struct tdb_context *, TDB_DATA)
tdb_expand: int (struct tdb_context *, tdb_off_t)
tdb_fd: int (struct tdb_context *)
tdb_fetch: TDB_DATA (struct tdb_context *, TDB_DATA)
tdb_find_lock_hash: tdb_off_t (struct tdb_context *, TDB_DATA, uint32_t, int, struct tdb_record *)
tdb_firstkey: TDB_DATA (struct tdb_context *)
tdb_free: int (struct tdb_context *, tdb_off_t, struct tdb_record *)
tdb_freelist_size: int (struct tdb_context *)
tdb_get_flags: int (struct tdb_context *)
tdb_get_logging_private: void *(struct tdb_context *)
tdb_get_seqnum: int (struct tdb_context *)
tdb_hash_size: int (struct tdb_context *)
tdb_increment_seqnum_nonblock: void (struct tdb_context *)
tdb_io_init: void (struct tdb_context *)
tdb_lock: int (struct tdb_context *, int, int)
tdb_lockall: int (struct tdb_context *)
tdb_lockall_mark: int (struct tdb_context *)
tdb_lockall_nonblock: int (struct tdb_context *)
tdb_lockall_read: int (struct tdb_context *)
tdb_lockall_read_nonblock: int (struct tdb_context *)
tdb_lockall_unmark: int (struct tdb_context *)
tdb_lock_nonblock: int (struct tdb_context *, int, int)
tdb_lock_record: int (struct tdb_context *, tdb_off_t)
tdb_log_fn: tdb_log_func (struct tdb_context *)
tdb_map_size: size_t (struct tdb_context *)
tdb_mmap: void (struct tdb_context *)
tdb_munmap: int (struct tdb_context *)
tdb_name: const char *(struct tdb_context *)
tdb_nextkey: TDB_DATA (struct tdb_context *, TDB_DATA)
tdb_null: {dptr = 0x0, dsize = 0}
tdb_ofs_read: int (struct tdb_context *, tdb_off_t, tdb_off_t *)
tdb_ofs_write: int (struct tdb_context *, tdb_off_t, tdb_off_t *)
tdb_open: struct tdb_context *(const char *, int, int, int, mode_t)
tdb_open_ex: struct tdb_context *(const char *, int, int, int, mode_t, const struct tdb_logging_context *, tdb_hash_func)
tdb_parse_data: int (struct tdb_context *, TDB_DATA, tdb_off_t, tdb_len_t, int (*)(TDB_DATA, TDB_DATA, void *), void *)
tdb_parse_record: int (struct tdb_context *, TDB_DATA, int (*)(TDB_DATA, TDB_DATA, void *), void *)
tdb_printfreelist: int (struct tdb_context *)
tdb_rec_free_read: int (struct tdb_context *, tdb_off_t, struct tdb_record *)
tdb_rec_read: int (struct tdb_context *, tdb_off_t, struct tdb_record *)
tdb_rec_write: int (struct tdb_context *, tdb_off_t, struct tdb_record *)
tdb_remove_flags: void (struct tdb_context *, unsigned int)
tdb_reopen: int (struct tdb_context *)
tdb_reopen_all: int (int)
tdb_repack: int (struct tdb_context *)
tdb_setalarm_sigptr: void (struct tdb_context *, volatile sig_atomic_t *)
tdb_set_logging_function: void (struct tdb_context *, const struct tdb_logging_context *)
tdb_set_max_dead: void (struct tdb_context *, int)
tdb_store: int (struct tdb_context *, TDB_DATA, TDB_DATA, int)
tdb_transaction_cancel: int (struct tdb_context *)
tdb_transaction_commit: int (struct tdb_context *)
tdb_transaction_lock: int (struct tdb_context *, int)
tdb_transaction_prepare_commit: int (struct tdb_context *)
tdb_transaction_recover: int (struct tdb_context *)
tdb_transaction_start: int (struct tdb_context *)
tdb_transaction_unlock: int (struct tdb_context *)
tdb_traverse: int (struct tdb_context *, tdb_traverse_func, void *)
tdb_traverse_read: int (struct tdb_context *, tdb_traverse_func, void *)
tdb_unlock: int (struct tdb_context *, int, int)
tdb_unlockall: int (struct tdb_context *)
tdb_unlockall_read: int (struct tdb_context *)
tdb_unlock_record: int (struct tdb_context *, tdb_off_t)
tdb_validate_freelist: int (struct tdb_context *, int *)
tdb_wipe_all: int (struct tdb_context *)
tdb_write_lock_record: int (struct tdb_context *, tdb_off_t)
tdb_write_unlock_record: int (struct tdb_context *, tdb_off_t)
tokenize_ip_port: int (const char *, char **, char **)
tolower_sp: uint32_t (uint32_t)
tolower_w: uint16_t (uint16_t)
toupper_sp: uint32_t (uint32_t)
toupper_w: uint16_t (uint16_t)
type_configs: {{set = false, syslog = false, fd = -1, level = log_none, display_options = 0}, {set = false, syslog = false, fd = -1, level = log_none, display_options = 0}, {set = false, syslog = false, fd = -1, level = log_none, display_options = 0}, {set = false, syslog = false, fd = -1, level = log_none, display_options = 0}, {set = false, syslog = false, fd = -1, level = log_none, display_options = 0}, {set = false, syslog = false, fd = -1, level = log_none, display_options = 0}, {set = false, syslog = false, fd = -1, level = log_none, display_options = 0}, {set = false, syslog = false, fd = -1, level = log_none, display_options = 0}, {set = false, syslog = false, fd = -1, level = log_none, display_options = 0}}
ucs2_to_charset: size_t (charset_t, const uint16_t *, char *, size_t)
ucs2_to_charset_allocate: size_t (charset_t, char **, const uint16_t *)
unbecome_root: void (void)
unix_rename: int (int, const char *, int, const char *)
unix_strlower: size_t (const char *, size_t, char *, size_t)
unix_strupper: size_t (const char *, size_t, char *, size_t)
unload_volumes: void (AFPObj *)
utf8_charlen: size_t (char *)
utf8_decompose: size_t (char *, size_t, char *, size_t)
utf8_precompose: size_t (char *, size_t, char *, size_t)
utf8_strlen_validate: size_t (char *)
utf8_strlower: size_t (const char *, size_t, char *, size_t)
utf8_strupper: size_t (const char *, size_t, char *, size_t)
utf8_to_charset_allocate: size_t (charset_t, char **, const char *)
uuid_bin2string: const char *(const unsigned char *)
uuidcache_dump: void (void)
uuid_string2bin: void (const char *, unsigned char *)
uuidtype: {"", "USER", "GROUP", "LOCAL"}
volume_free: void (struct vol *)
volume_unlink: void (struct vol *)
writet: ssize_t (int, void *, const size_t, int, int)
